// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ---- Core models (v1) ----

model User {
  id        String   @id @default(uuid())
  email     String?  @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())

  // relations
  posts     Post[]
  comments  Comment[]
  events    Event[]  @relation("EventCreator")
  likes     Like[]
  photos    Photo[]
  videos    Video[]
}

model Post {
  id          String    @id @default(uuid())
  authorId    String?
  author      User?     @relation(fields: [authorId], references: [id])
  title       String
  content     String    // markdown or plain text
  published   Boolean   @default(true)
  archived    Boolean   @default(false) // for archive functionality
  // denormalized counters you can maintain later if you want speed:
  // commentCount Int @default(0)
  // likeCount    Int @default(0)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  comments    Comment[]
  likes       Like[]
  photos      Photo[]
  videos      Video[]

  @@index([authorId])
  @@index([createdAt])
  @@index([archived])
}

model Comment {
  id         String    @id @default(uuid())
  postId     String
  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId   String?
  author     User?     @relation(fields: [authorId], references: [id])
  content    String
  parentId   String?   // for threaded replies (optional)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // self-relation for nesting
  parent     Comment?  @relation("CommentToReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentToReplies")
  likes      Like[]

  @@index([postId, createdAt])
  @@index([parentId])
}

model Event {
  id             String   @id @default(uuid())
  title          String
  description    String?
  startsAt       DateTime
  endsAt         DateTime
  allDay         Boolean  @default(false)
  location       String?
  url            String?  // link to external event page or ticketing
  createdById    String?
  createdBy      User?    @relation("EventCreator", fields: [createdById], references: [id])

  // Optional Google Calendar mapping for later sync
  gcalEventId    String?
  gcalCalendarId String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([startsAt])
  @@index([createdById])
}

model Like {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  // polymorphic: like a post OR a comment
  postId     String?
  post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId  String?
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())

  // prevent double-liking
  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@index([postId])
  @@index([commentId])
}

model Photo {
  id           String   @id @default(uuid())
  postId       String?  // FK to posts(id) or gallery_id/event_id
  post         Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Cloudinary fields
  publicId     String   // "folder/name_xxx" - Cloudinary public_id
  url          String   // Full Cloudinary URL
  width        Int
  height       Int
  format       String   // jpg, png, webp, etc.
  bytes        Int      // File size in bytes
  
  // Optional metadata
  caption      String?
  uploaderId   String?
  uploader     User?    @relation(fields: [uploaderId], references: [id])

  createdAt    DateTime @default(now())

  @@index([postId])
  @@index([publicId])
  @@index([createdAt])
}

model Video {
  id           String   @id @default(uuid())
  postId       String?  // FK to posts(id) or gallery_id/event_id
  post         Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Cloudinary fields
  publicId     String   // "folder/name_xxx" - Cloudinary public_id
  url          String   // Full Cloudinary URL
  width        Int
  height       Int
  format       String   // mp4, webm, etc.
  bytes        Int      // File size in bytes
  duration     Float?   // Duration in seconds
  
  // Optional metadata
  caption      String?
  uploaderId   String?
  uploader     User?    @relation(fields: [uploaderId], references: [id])

  createdAt    DateTime @default(now())

  @@index([postId])
  @@index([publicId])
  @@index([createdAt])
}

model Settings {
  id          String   @id @default(uuid())
  key         String   @unique // e.g., 'website', 'contact', etc.
  value       Json     // Store settings as JSON
  description String?  // Optional description of what this setting controls
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
}

